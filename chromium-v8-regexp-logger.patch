diff --git a/src/regexp/regexp.cc b/src/regexp/regexp.cc
index 5f83269a8f..9c9b21e994 100644
--- a/src/regexp/regexp.cc
+++ b/src/regexp/regexp.cc
@@ -24,6 +24,60 @@
 namespace v8 {
 namespace internal {
 
+#include <string.h>
+#include <stdio.h>
+#include <unistd.h>
+
+/* Base64 */
+std::string base64_encode(std::unique_ptr<char[]> cstr) {
+  unsigned char* bytes_to_encode = (unsigned char*) cstr.get();
+  unsigned int in_len = (unsigned int) strlen((const char *) bytes_to_encode);
+  std::string ret;
+  int i = 0;
+  int j = 0;
+  unsigned char char_array_3[3];
+  unsigned char char_array_4[4];
+  const std::string base64_chars =
+              "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
+              "abcdefghijklmnopqrstuvwxyz"
+              "0123456789+/";
+
+  while (in_len--) {
+    char_array_3[i++] = *(bytes_to_encode++);
+    if (i == 3) {
+      char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
+      char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
+      char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
+      char_array_4[3] = char_array_3[2] & 0x3f;
+
+      for(i = 0; (i <4) ; i++)
+        ret += base64_chars[char_array_4[i]];
+      i = 0;
+    }
+  }
+
+  if (i)
+  {
+    for(j = i; j < 3; j++)
+      char_array_3[j] = '\0';
+
+    char_array_4[0] = ( char_array_3[0] & 0xfc) >> 2;
+    char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4);
+    char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6);
+
+    for (j = 0; (j < i + 1); j++)
+      ret += base64_chars[char_array_4[j]];
+
+    while((i++ < 3))
+      ret += '=';
+
+  }
+
+  return ret;
+
+}
+/* End Base64 */
+
 using namespace regexp_compiler_constants;  // NOLINT(build/namespaces)
 
 class RegExpImpl final : public AllStatic {
@@ -154,6 +208,22 @@ MaybeHandle<Object> RegExp::Compile(Isolate* isolate, Handle<JSRegExp> re,
                                     Handle<String> pattern,
                                     JSRegExp::Flags flags,
                                     uint32_t backtrack_limit) {
+  int i = 0;
+  EmbeddedVector<char, 128> buf;
+  if (flags & JSRegExp::kGlobal) buf[i++] = 'g';
+  if (flags & JSRegExp::kIgnoreCase) buf[i++] = 'i';
+  if (flags & JSRegExp::kMultiline) buf[i++] = 'm';
+  if (flags & JSRegExp::kUnicode) buf[i++] = 'u';
+  if (flags & JSRegExp::kSticky) buf[i++] = 'y';
+  buf[i] = '\0';
+  char* str;
+  int len = asprintf(&str, "\nRegExp::Compile,%s,,%s\n", base64_encode(pattern->ToCString()).c_str(),buf.begin());
+  if (len > 0) {
+    ssize_t bytes_written = write(1, str, len);
+    len -= (int) bytes_written;
+  }
+  free(str);
+
   DCHECK(pattern->IsFlat());
 
   // Caching is based only on the pattern and flags, but code also differs when
@@ -280,6 +350,15 @@ MaybeHandle<Object> RegExp::Exec(Isolate* isolate, Handle<JSRegExp> regexp,
                                  Handle<String> subject, int index,
                                  Handle<RegExpMatchInfo> last_match_info,
                                  ExecQuirks exec_quirks) {
+  String pattern = regexp->Pattern();
+  char* str;
+  int len = asprintf(&str, "\nRegExp::Exec,%s,%s\n", base64_encode(pattern.ToCString()).c_str(), base64_encode(subject->ToCString()).c_str());
+  if (len > 0) {
+    ssize_t bytes_written = write(1, str, len);
+    len -= (int) bytes_written;
+  }
+  free(str);
+
   switch (regexp->TypeTag()) {
     case JSRegExp::NOT_COMPILED:
       UNREACHABLE();
@@ -300,6 +379,13 @@ MaybeHandle<Object> RegExp::Exec(Isolate* isolate, Handle<JSRegExp> regexp,
 void RegExpImpl::AtomCompile(Isolate* isolate, Handle<JSRegExp> re,
                              Handle<String> pattern, JSRegExp::Flags flags,
                              Handle<String> match_pattern) {
+  char* str;
+  int len = asprintf(&str, "\nRegExpImpl::AtomCompile,%s,\n", base64_encode(pattern->ToCString()).c_str());
+  if (len > 0) {
+    ssize_t bytes_written = write(1, str, len);
+    len -= (int) bytes_written;
+  }
+  free(str);
   isolate->factory()->SetRegExpAtomData(re, pattern, flags, match_pattern);
 }
 
@@ -317,6 +403,15 @@ static void SetAtomLastCapture(Isolate* isolate,
 int RegExpImpl::AtomExecRaw(Isolate* isolate, Handle<JSRegExp> regexp,
                             Handle<String> subject, int index, int32_t* output,
                             int output_size) {
+  String pattern = regexp->Pattern();
+  char* str;
+  int len = asprintf(&str, "\nRegExpImpl::AtomExecRaw,%s,%s\n", base64_encode(pattern.ToCString()).c_str(), base64_encode(subject->ToCString()).c_str());
+  if (len > 0) {
+    ssize_t bytes_written = write(1, str, len);
+    len -= (int) bytes_written;
+  }
+  free(str);
+
   DCHECK_LE(0, index);
   DCHECK_LE(index, subject->length());
 
@@ -364,6 +459,15 @@ int RegExpImpl::AtomExecRaw(Isolate* isolate, Handle<JSRegExp> regexp,
 Handle<Object> RegExpImpl::AtomExec(Isolate* isolate, Handle<JSRegExp> re,
                                     Handle<String> subject, int index,
                                     Handle<RegExpMatchInfo> last_match_info) {
+  String pattern = re->Pattern();
+  char* str;
+  int len = asprintf(&str, "\nRegExpImpl::AtomExec,%s,%s\n", base64_encode(pattern.ToCString()).c_str(), base64_encode(subject->ToCString()).c_str());
+  if (len > 0) {
+    ssize_t bytes_written = write(1, str, len);
+    len -= (int) bytes_written;
+  }
+  free(str);
+
   static const int kNumRegisters = 2;
   STATIC_ASSERT(kNumRegisters <= Isolate::kJSRegexpStaticOffsetsVectorSize);
   int32_t* output_registers = isolate->jsregexp_static_offsets_vector();
